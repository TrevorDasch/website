

var blogs = {};

blogs.createServer = function(proto, app, validateUser, callback){


	var mongodb = require('mongodb');
	
	var cache = {};

	this.clearCache = function(){
		var now = new Date();
		for(var c in cache){
			if(cache[c].date.getTime() + 1800000 < now.getTime())
				delete cache[c];
		}
	}


	this.bbReplace =function(str){

		str = str.replace(/</g,'&lt;');
		str = str.replace(/>/g,'&gt;');
		str = str.replace(/\n/g,'<br/>');

		var bb, htmls, htmle;

		var bbtohtmllist = [['b','strong'],
					['i','em'],
					['u','ins'],
					['s','del'],
					['quote','span class="quote"','span'],
					['code','pre'],
					['table','table'],
					['tr','tr'],
					['td','td']];



		for(var i = 0; i<bbtohtmllist.length; i++){
			bb = bbtohtmllist[i][0];
			htmls = bbtohtmllist[i][1];
			if(bbtohtmllist[i].length==3)
				htmle = bbtohtmllist[i][2];
			else
				htmle = htmls;

			var regex = '\\['+bb+'\\]([^\\[]*)\\[\\/'+bb+'\\]';
			var replacement = '<'+htmls+'>$1</'+htmle+'>';

			str = str.replace(new RegExp(regex,'g'),replacement);

		}


		bb = 'url';
		htmls = 'a href="';
		htmle = 'a';

		var regex = '\\['+bb+'\\]([^\\["]*)\\[\\/'+bb+'\\]';
		var replacement = '<'+htmls+'$1">$1</'+htmle+'>';

		str = str.replace(new RegExp(regex,'g'),replacement);

		bb = 'youtube';
		htmls = 'iframe class=youtube-player type=text/html width=512 height=378 src=';
		htmle ='iframe';

		var regex = '\\['+bb+'\\]([^\\["]*)(v=|\\/)([^\\[\\/]*)\\[\\/'+bb+'\\]';
		var replacement = '<'+htmls+'http://www.youtube.com/embed/$3></'+htmle+'>';

		str = str.replace(new RegExp(regex,'g'),replacement);


		bb = 'img';
		htmls = 'img src="';

		var regex = '\\['+bb+'\\]([^\\["]*)\\[\\/'+bb+'\\]';
		var replacement = '<'+htmls+'$1"/>';

		str = str.replace(new RegExp(regex,'g'),replacement);



		var bbtohtmllist2 = [['url','a href="','a'],
					 ['color','span style="color:','span'],
					 ['size','span style="font-size:','span']];


		for(var i = 0; i<bbtohtmllist2.length; i++){
			bb = bbtohtmllist2[i][0];
			htmls = bbtohtmllist2[i][1];
			if(bbtohtmllist2[i].length==3)
				htmle = bbtohtmllist2[i][2];
			else
				htmle = htmls;
			var regex = '\\['+bb+'=([^\\]"]*)\\]([^\\[]*)\\[\\/'+bb+'\\]';
			var replacement = '<'+htmls+'$1">$2</'+htmle+'>';
			str = str.replace(new RegExp(regex,'g'),replacement);

		}

		return str;
	}	
	var self = this;


	var server = new mongodb.Server("127.0.0.1", 27017, {});


	new mongodb.Db('blogs', server, {}).open(function (error, client) {
		if(error) throw error;
		
		app.get('/blogs/:page?', function(req, res){
			
			res.contentType('application/json');
			
			var pageSize = (req.query && req.query['pagesize']?req.query['pagesize']:1);
			var page = 1;
			if(req.params.page)
				page = req.params.page;
			var blogs = new mongodb.Collection(client, 'blogs');
				
			blogs.find().sort({date:-1}).skip((page-1)*pageSize).limit(pageSize).toArray(function(err,docs){
				if(err || docs.length==0)
					res.send('{"error":"no blog found on this page"}',400);
				else
					res.send(docs);
			});
			
			
		});

		app.get('/blog/:id', function(req, res){
			
			res.contentType('application/json');
			
			var blogs = new mongodb.Collection(client, 'blogs');
			var id;
			try{
				id = new mongodb.ObjectID(req.params.id);
			}catch(e){
				res.send('{"error":"invalid blog"}',400);
				return;
			}
			
			blogs.findOne({"_id":id},function(err,doc){
				if(err ||!doc){
					res.send('{"error":"invalid blog"}',400);
					return;
				}
				res.send(doc);
			});	
		});
		
		app.get('/count', function(req, res){
			
			res.contentType('application/json');
			
			var blogs = new mongodb.Collection(client, 'blogs');
				
			blogs.count(function(err,count){
				res.send('{"count":'+count+'}');
			});
			
		});
		
		app.post('/blog',function(req, res){
			
			res.contentType('application/json');
			
			validateUser(req.header("Authorization"),function(err,user){
				if(err || !user.admin){
					res.send('{"error":"requires admin to post"}',401);
					return;
				}
				var blogs = new mongodb.Collection(client, 'blogs');

				var title = req.body.title;
				var text = req.body.text;
				var date = new Date();
				
				if(!title || !text){
					res.send('{"error":"requires a title and body"}',400);
					return;
				}
				
				
				var blogPost = {};
				blogPost.title = self.bbReplace(title);
				blogPost.text = text;
				blogPost.html = self.bbReplace(text);
				blogPost.date = date;
				
				
				blogs.insert(blogPost,{safe:true},function(err,docs){
					if(err || docs.length==0)
						res.send('{"error":"???"}',500);
					else
						res.send(docs[0]);				
				});
			
			});
		});
		
		app.put('/blog/:id',function(req, res){
			
			res.contentType('application/json');
			
			validateUser(req.header("Authorization"),function(err,user){
				if(err || !user.admin){
					res.send('{"error":"invalid user"}',401);
					return;
				}
				
				var blogs = new mongodb.Collection(client, 'blogs');


				var id;
				try{
					id = new mongodb.ObjectID(req.params.id);
				}catch(e){
					res.send('{"error":"invalid blog"}',400);
					return;
				}
				
				blogs.findOne({"_id":id},function(err,doc){
					if(err ||!doc){
						res.send('{"error":"invalid blog"}',400);
						return;
					}
					
					var blogPost = doc;
					
					var title = req.body.title;
					var text = req.body.text;
					
					if(title)
						blogPost.title = self.bbReplace(title);
					if(text){
						blogPost.text = text;
						blogPost.html = self.bbReplace(text);
					}
					
					blogs.update({"_id":id},blogPost,{safe: true},function(err){
						if(err)
							res.send('{"error":"failed to update blog"}',500);
						else{
							res.send(blogPost);
						}
					});
				});
			
			});
		});
		
		app.delete('/blog/:id',function(req, res){
			
			res.contentType('application/json');
			
			validateUser(req.header("Authorization"),function(err,user){
				if(err || !user.admin){
					res.send('{"error":"invalid user"}',401);
					return;
				}
				
				var blogs = new mongodb.Collection(client, 'blogs');


				var id;
				try{
					id = new mongodb.ObjectID(req.params.id);
				}catch(e){
					res.send('{"error":"invalid blog"}',400);
					return;
				}
				
				blogs.findOne({"_id":id},function(err,doc){
					if(err ||!doc){
						res.send('{"error":"invalid blog"}',400);
						return;
					}
					
					blogs.remove({"_id":id});
					res.send('{"success":true}');
					
				});
			
			});
		});



		app.get('/cache/:host/*',function(req,results){
			var host = req.params['host'];
			var path = '/'+req.params[0]+'?';

			for(var q in req.query){
				path+= q +'='+req.query[q]+'&';
			}

			
			var queryurl='https://'+host+path;
			
			
			if(cache[queryurl]){
				results.send(cache[queryurl].data);
				return;
			}
			
			https.get({host:host,path:path,port:443},function(res){
				var str = "";
				res.on('data', function(data) {
					str+=data;
				}).on('end', function() {
					results.send(str);
					cache[queryurl] = {date: new Date(), data: str};
				});
					
			}).on('error',function(e){
				results.send('{"error":"'+e+'", "query":"'+queryurl+'"}',400);
			});	
		});
		

		setInterval(self.clearCache,1800);
		
		callback(app);
		
	});
	
}

module.exports = blogs;
