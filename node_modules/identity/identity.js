
var identity = {};

identity.createServer = function(proto, app, cryptokey, callback){

	var mongodb = require('mongodb');
	var bcrypt = require('bcrypt');
	var crypto = require('crypto');	
	var https = require('https');

	var RANKS = [
		{score: 0, value: 1},
		{score: 1000, value: 3},
		{score: 10000, value: 10},
		{score: 100000, value: 30},
		{score: 1000000, value: 100},
	]


	var server = new mongodb.Server("127.0.0.1", 27017, {});




	new mongodb.Db('identity', server, {}).open(function (error, client) {
		if(error) throw error;
		
		
		function encrypt(data){
			//console.log('Original cleartext: ' + data);
			var algorithm = 'aes-128-cbc';
			var key = cryptokey;
			var clearEncoding = 'utf8';
			var cipherEncoding = 'hex';
			//If the next line is uncommented, the final cleartext is wrong.
			//cipherEncoding = 'base64';
			var cipher = crypto.createCipher(algorithm, key);
			var cipherChunks = [];
			cipherChunks.push(cipher.update(data, clearEncoding, cipherEncoding));
			cipherChunks.push(cipher.final(cipherEncoding));
			//console.log(cipherEncoding + ' ciphertext: ' + cipherChunks.join(''));
			
			return cipherChunks.join('-');
		}
		
		function decrypt(cypherdata){
			if(!cypherdata || cypherdata =="")
				return null;
			
			var cipherChunks = cypherdata.split('-');
			
			var algorithm = 'aes-128-cbc';
			var key = cryptokey;
			var clearEncoding = 'utf8';
			var cipherEncoding = 'hex';

			var decipher = crypto.createDecipher(algorithm, key);
			var plainChunks = [];
			for (var i = 0;i < cipherChunks.length;i++) {
			  plainChunks.push(decipher.update(cipherChunks[i], cipherEncoding, clearEncoding));

			}
			plainChunks.push(decipher.final(clearEncoding));
			//console.log("UTF8 plaintext deciphered: " + plainChunks.join(''));
			
			return plainChunks.join('');
		}
		

		function getFacebookUser(oAuth, callback){

			https.get({host:"graph.facebook.com",path:"/me?access_token="+encodeURIComponent(oAuth.accessToken)}, function(res){
				var user = "";
				res.on('data', function(data) {
					user+=data;
				}).on('end', function() {
					var obj = JSON.parse(user);
					if(obj.error)
						callback(obj,null);
					else
						callback(null, obj);

				});
			});
		}
				
		app.post("/login",function(req,res){
			//console.log(req.body);
			
			var email = req.body.email;
			var password = req.body.password;
			
			
			if(!email || !password){
				res.send('{"error":"invalid email or password"}',400);
				return;
			}
			
			var users = new mongodb.Collection(client, 'users');
			
			users.findOne({email: email},function(err,user){
				if(err || !user){
					res.send('{"error":"invalid email or password"}',400);
					return;
				}
				bcrypt.compare(password,user.password,function(err,valid){
					if(valid)
						res.send({"token":encrypt(user["_id"].toString()),"username":user.name,"id":user["_id"],"admin":user.admin});
					else{
						res.send('{"error":"invalid name or password"}',400)
					}
				});		
			});
		});
		
		app.post("/register",function(req,res){
			var username = req.body.username;
			var password = req.body.password;
			var email = req.body.email;
			var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
			
			//console.log(req.body);
			
			if(!username || !password){
				res.send('{"error":"invalid name or password"}',400);
				return;
			}
			if(username.length<5){
				res.send('{"error":"username too short"}',400);
				return;
			}

			if(password.length<5){
				res.send('{"error":"password too short"}',400);
				return;
			}
			
			
			if( !email || !re.test(email)){
				res.send('{"error":"invalid email address"}',400);
				return;
			}
			
			var users = new mongodb.Collection(client, 'users');
			
			users.findOne({"$or":[{name: username},{ email:email}]},function(err,doc){
				if(err || !doc){
					bcrypt.hash(password,8, function(err,hash){
						if(err){
							res.send('{"error":"something bad happened"}',500);
							return;
						}
						users.insert({"name":username,
									  "password":hash,
									  "email":email,
									  "score":0,
									  "rank":0,
						},{"safe":true},function(err,docs){
							if(err || docs.length == 0)
								res.send('{"error":"something bad happened"}',500);
							else
								res.send({"token":encrypt(docs[0]["_id"].toString()),"username":docs[0].name,"id":docs[0]["_id"]});
						});
						
					});
				}
				else{
					if( doc.name == username)
						res.send('{"error":"username name already taken"}',400);
					else
						res.send('{"error":"an account exists with that email"}',400);
				}
			});
		});
		
		
		app.post("/loginfacebook",function(req,res){
			//console.log(req.body);
			
			var oAuth = req.body.oAuth;
			
			
			if(!oAuth){
				res.send('{"error":"oAuth token required to log in with facebook"}',401);
				return;
			}
			
			getFacebookUser(oAuth,function(err,user){
				if(err || !user){
					console.log(err);
					res.send('{"error":"failed to retrieve identity from facebook"}',400);
					return;
				}
			
				var users = new mongodb.Collection(client, 'users');
				
				
				users.findOne({facebookId: user.id},function(err,doc){
					if(err || !doc){
						users.insert({"name":user.name,
								  "facebookId":user.id,
								  "score":0,
								  "rank":0
						},{"safe":true},function(err,docs){
							if(err || docs.length == 0)
								res.send('{"error":"something bad happened"}',500);
							else
								res.send({"token":encrypt(docs[0]["_id"].toString()),"username":docs[0].name,"id":docs[0]["_id"]});
						
						});	
					}
					else{
						res.send({"token":encrypt(doc["_id"].toString()),"username":doc.name,"id":doc["_id"],"admin":doc.admin});
		
					}
				});
			});
		});
		
		this.validateUser = function(token, callback){
			//console.log("validating");
			//console.log(req.params.key);
			//console.log(SERVERKEY);
			//console.log(req.params.token);
			var users = new mongodb.Collection(client, 'users');

			var dectok = decrypt(token);
			
			var id;
			try{
				id = new mongodb.ObjectID(dectok);
			}
			catch(e){
				callback('{"error":"unauthorized"}',null);
				return;
			}
				
			//replace with crypto
			users.findOne({"_id":id},function(err,doc){
				callback(null, doc);
			});
		}

		this.updateUscore = function(id, val){
			var users = new mongodb.Collection(client, 'users');
			
			try{
				id = new mongodb.ObjectID(id);
			}catch(e){
				return;
			}
		
			users.findOne({"_id":id},function(err,doc){
				if(err || !doc){
					return;
				}
				
				if(doc.rank < RANKS.length-1 && doc.score > RANKS[doc.rank+1].score)
					users.update(doc,{"$inc":{"score":val},"$inc":{"rank":1}});	
				else
					users.update(doc,{"$inc":{"score":val}});
				
			});
		
		}
		
		callback(app, this);
	});
		
}

module.exports = identity;
